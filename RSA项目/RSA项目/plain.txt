#include <iostream>
#include <string>
#include <queue>
#include <pthread.h>
#include <stdio.h>
class BlockQueue{
	private:
		std::queue<int> _queue;
		int _capacity;
		pthread_mutex_t _mutex;
		pthread_cond_t _productor;
		pthread_cond_t _customer;
	private:
		void QueueLock(){
			pthread_mutex_lock(&_mutex);
		}

		void QueueUnLock(){
			pthread_mutex_unlock(&_mutex);
		}
		
		void ProductorWait(){
			pthread_cond_wait(&_productor, &_mutex);
		}

		void ProductorWakeUp(){
			pthread_cond_signal(&_productor);
		}

		void CustomerWait(){
			pthread_cond_wait(&_customer, &_mutex);
		}

		void CustomerWakeUp{
			pthread_cond_signal(&_customer);
		}

		bool QueueIsEmpty(){
			return _queue.empty();
		}

		bool IsFull(){
			return (_queue.size() == _capacity);
		}
	public:
		BlockQueue(){
			pthread_mutex_init(&_mutex, NULL);
			pthread_cond_init(&_productor, NULL);
			pthread_cond_init(&_customer, NULL);
		}
		
		~BlockQueue(){
			pthread_mutex_destory(&_mutex);
			pthread_cond_destory(&_productor);
			pthread_cond_destory(&_customer)；
		}
		
		void Productor(int val){
			QueueLock();
			if(QueueIsFull()){
				ProductorWait();
			}
			_queue.push(val);
			QueueUnLock();
			CustomerWakeUp();	
		}

		void Customer(int *val){
			QueueLock();
			if(QueueIsEmpty()){
				CustomerWait();
			}
			*val = _queue.front();
			_queue.pop();
			QueueUnLock();
			ProductorWakeUp();
		}
	创建消费者条件变量
	创建生产者条件变量
	提供外部接口加锁，解锁，等待，唤醒
	构造初始化互斥锁，条件变量
	析构释放互斥锁，条件变量资源
	生产者从商品队列中取商品
	消费者向商品队列中添加商品
	生产者测试
	消费者测试
	创建对象
	创建线程
	等待线程退出
};